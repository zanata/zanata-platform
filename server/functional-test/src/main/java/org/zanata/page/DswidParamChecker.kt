/*
 * Copyright 2016, Red Hat, Inc. and individual contributors
 * as indicated by the @author tags. See the copyright.txt file in the
 * distribution for a full listing of individual contributors.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.zanata.page

import java.nio.charset.StandardCharsets.UTF_8
import java.lang.reflect.Method
import java.lang.reflect.Proxy
import java.net.MalformedURLException
import java.net.URL
import java.util.Optional
import org.apache.http.NameValuePair
import org.apache.http.client.utils.URLEncodedUtils
import org.openqa.selenium.support.events.EventFiringWebDriver
import org.openqa.selenium.support.events.WebDriverEventListener
import org.slf4j.Logger
import org.slf4j.LoggerFactory

/**
 *
 *
 * DswidParamChecker provides a WebDriverEventListener which tracks dswid
 * parameters (used by DeltaSpike's window/conversation management). It logs a
 * warning when navigation loses the dswid parameter, and throws an
 * AssertionError if the dswid changes to a different value.
 *
 *
 *
 * DswidParamChecker currently only supports a single browser tab, since it
 * assumes a single dswid value.
 *
 *
 *
 * TODO: ignore URLs generated by explicit navigation by the test <br></br>
 * TODO: treat loss of previous dswid as failure
 *
 *
 * @author Sean Flanigan
 * [sflaniga@redhat.com](mailto:sflaniga@redhat.com)
 */
class DswidParamChecker
/**
 * Creates a listener for the specified driver, but does not register it.
 * See getEventListener().
 *
 * @param driver
 */
(private val driver: EventFiringWebDriver) {
    /**
     * Returns a WebDriverEventListener which will track dswid parameters. It
     * can be registered like this: driver.register(new
     * DswidParamChecker(driver).getEventListener());
     */
    val eventListener: WebDriverEventListener
    private var oldUrl: String? = null
    var oldDswid: String? = null
        private set
    private var checkingDswids = true
    private var insideInvoke: Boolean = false

    init {
        this.eventListener = Proxy.newProxyInstance(
                DswidParamChecker::class.java.classLoader,
                arrayOf<Class<*>>(WebDriverEventListener::class.java)) {
            proxy, method, args -> this.invoke(proxy, method, args)
        } as WebDriverEventListener
    }

    @Throws(Throwable::class)
    private operator fun invoke(proxy: Any, method: Method, args: Array<Any>): Any? {
        if (insideInvoke) {
            return null
        }
        insideInvoke = true
        try {
            val url = driver.currentUrl
            val query = URL(url).query
            val dswid: Optional<String>
            dswid = if (query == null) {
                Optional.empty()
            } else {
                URLEncodedUtils.parse(query, UTF_8).stream()
                        .filter { p -> p.name == "dswid" }
                        .map<String> { it -> it.value }.findFirst()
            }
            if (checkingDswids && oldDswid != null) {
                assert(oldUrl != null)
                if (!dswid.isPresent) {
                    val msg = ("missing dswid on transition from " + oldUrl
                            + " to " + url)

                    // throw new AssertionError(msg);
                    log.warn(msg)
                } else {
                    if (oldDswid != dswid.get()) {
                        throw AssertionError(
                                "changed dswid on transition from " + oldUrl
                                        + " to " + url)
                    }
                }
            }
            oldDswid = dswid.orElse(null)
            oldUrl = url
            return null
        } catch (e: MalformedURLException) {
            // just ignore this URL entirely
            return null
        } finally {
            insideInvoke = false
        }
    }

    fun clear() {
        oldDswid = null
        oldUrl = null
    }

    fun startChecking() {
        checkingDswids = true
    }

    fun stopChecking() {
        checkingDswids = false
    }

    companion object {
        private val log = LoggerFactory.getLogger(DswidParamChecker::class.java)
    }
}

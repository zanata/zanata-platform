# run jboss-cli.sh --file=<location of this file> to apply messaging changes
# jboss cli specification for an operation request
# [/node-type=node-name (/node-type=node-name)*] : operation-name [( [parameter-name=parameter-value (,parameter-name=parameter-value)*] )]
# The default variable substitution are turned off by default in bin/jboss-cli.xml so ${var} will be passed to standalone-full*.xml as is.

# run cli in offline (embeded server) mode, pipe std out to local script terminal
embed-server --std-out=echo --server-config=standalone-full-ha.xml

batch

# ==== system properties /system-property=foo:add(value=bar) ====
/system-property="zanata.home":add(value="${user.home}/zanata")
/system-property="javamelody.storage-directory":add(value="${zanata.home}/stats")
/system-property="hibernate.search.default.indexBase":add(value="${zanata.home}/indexes")
/system-property="zanata.file.directory":add(value="${zanata.home}/files")
/system-property="jboss.as.management.blocking.timeout":add(value="1000")
/system-property="zanata.security.authpolicy.internal":add(value="zanata.internal")
/system-property="zanata.security.authpolicy.openid":add(value="zanata.openid")
/system-property="zanata.security.authpolicy.saml2":add(value="zanata.saml2")
/system-property="zanata.email.defaultfromaddress":add(value="no-reply@zanata.org")
/system-property="zanata.support.oauth":add(value="true")
/system-property="picketlink.file":add(value="${zanata.home}/picketlink.xml")

## Allows the editor development server to use the docker server as a backend.
## The editor development server is run with `make watch` in zanata-frontend/src/editor
/system-property="zanata.origin.whitelist":add(value="http://localhost:8000 http://localhost:8001")
/system-property="virusScanner":add(value="DISABLED")

# ==== cached connection manager ====
/subsystem=jca/cached-connection-manager=cached-connection-manager/:write-attribute(name=debug,value=true)
/subsystem=jca/cached-connection-manager=cached-connection-manager/:write-attribute(name=error,value=true)

# ==== add datasource ====
/subsystem=datasources/jdbc-driver=mysql:add(driver-name="mysql",\
    driver-module-name="com.mysql",\
    driver-xa-datasource-class-name="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource",\
    driver-class-name="com.mysql.jdbc.Driver")
data-source add --name=zanataDatasource \
    --jndi-name=java:jboss/datasources/zanataDatasource --driver-name=mysql \
    --connection-url=jdbc:mysql://${env.DB_HOSTNAME:zanatadb}:3306/${env.DB_NAME:zanata} \
    --user-name=${env.DB_USER:zanata} --password=${env.DB_PASSWORD:zanatapw} \
    --validate-on-match=true --background-validation=false \
    --valid-connection-checker-class-name=org.jboss.jca.adapters.jdbc.extensions.mysql.MySQLValidConnectionChecker \
    --exception-sorter-class-name=org.jboss.jca.adapters.jdbc.extensions.mysql.MySQLExceptionSorter \
    --min-pool-size=0 --max-pool-size=20 --flush-strategy=FailingConnectionOnly \
    --track-statements=NOWARN --use-ccm=true

# ==== logging configuration ====
# /subsystem=logging/logger=LOG_CATEGORY:add
# /subsystem=logging/logger=LOG_CATEGORY:write-attribute(name=level,value=DEBUG)
# /subsystem=logging/logger=LOG_CATEGORY:write-attribute(name=filter-spec, value=FILTER_EXPRESSION)

## Remove default file logging (server.log)
/subsystem=logging/root-logger=ROOT:remove-handler(name=FILE)
/subsystem=logging/periodic-rotating-file-handler=FILE:remove

## Allow stdout handler to include DEBUG/TRACE logging
/subsystem=logging/console-handler=CONSOLE:write-attribute(name=level,value=TRACE)

## Disable some startup warnings triggered by third-party jars
/subsystem=logging/logger=org.jboss.as.server.deployment:add
/subsystem=logging/logger=org.jboss.as.server.deployment:write-attribute(name=level,value=INFO)
/subsystem=logging/logger=org.jboss.as.server.deployment:write-attribute(name=filter-spec, value="not(any( match(\"JBAS015960\"), match(\"JBAS015893\") ))")
## Disable WARN about GWT's org.hibernate.validator.ValidationMessages
/subsystem=logging/logger=org.jboss.modules:add
/subsystem=logging/logger=org.jboss.modules:write-attribute(name=level,value=ERROR)
## Disable WARN: "RP discovery / realm validation disabled;"
/subsystem=logging/logger=org.openid4java.server.RealmVerifier:add
/subsystem=logging/logger=org.openid4java.server.RealmVerifier:write-attribute(name=level,value=ERROR)
## Disable WARN: "JMS API was found on the classpath...
/subsystem=logging/logger=org.richfaces.log.Application:add
/subsystem=logging/logger=org.richfaces.log.Application:write-attribute(name=level,value=INFO)
/subsystem=logging/logger=org.richfaces.log.Application:write-attribute(name=filter-spec, value="not( match(\"JMS API was found on the classpath\") )")
## Disable WARN: "Queue with name '...' has already been registered"
/subsystem=logging/logger=org.richfaces.log.Components:add
/subsystem=logging/logger=org.richfaces.log.Components:write-attribute(name=level,value=ERROR)

## Enable more CDI weld error logging for exceptions

# This won't work (yet) because filters aren't inherited
#/subsystem=logging/logger=org.jboss.weld:add
#/subsystem=logging/logger=org.jboss.weld:write-attribute(name=level,value=DEBUG)
#/subsystem=logging/logger=org.jboss.weld:write-attribute(name=filter-spec, value="any(match(\"Catching\"), levelRange[INFO, FATAL])")

# These are all the Logger classes in weld-core 3.0.1.Final which include
# catchingDebug() or catchingTrace() (mostly by extending org.jboss.weld.logging.WeldLogger):

/subsystem=logging/logger=org.jboss.weld.environment.logging.WeldEnvironmentLogger:add
/subsystem=logging/logger=org.jboss.weld.environment.logging.WeldEnvironmentLogger:write-attribute(name=level,value=DEBUG)
/subsystem=logging/logger=org.jboss.weld.environment.logging.WeldEnvironmentLogger:write-attribute(name=filter-spec, value="any(match(\"Catching\"), levelRange[INFO, FATAL])")

/subsystem=logging/logger=org.jboss.weld.logging.BeanLogger:add
/subsystem=logging/logger=org.jboss.weld.logging.BeanLogger:write-attribute(name=level,value=DEBUG)
/subsystem=logging/logger=org.jboss.weld.logging.BeanLogger:write-attribute(name=filter-spec, value="any(match(\"Catching\"), levelRange[INFO, FATAL])")

/subsystem=logging/logger=org.jboss.weld.logging.BeanManagerLogger:add
/subsystem=logging/logger=org.jboss.weld.logging.BeanManagerLogger:write-attribute(name=level,value=DEBUG)
/subsystem=logging/logger=org.jboss.weld.logging.BeanManagerLogger:write-attribute(name=filter-spec, value="any(match(\"Catching\"), levelRange[INFO, FATAL])")

/subsystem=logging/logger=org.jboss.weld.logging.BootstrapLogger:add
/subsystem=logging/logger=org.jboss.weld.logging.BootstrapLogger:write-attribute(name=level,value=DEBUG)
/subsystem=logging/logger=org.jboss.weld.logging.BootstrapLogger:write-attribute(name=filter-spec, value="any(match(\"Catching\"), levelRange[INFO, FATAL])")

/subsystem=logging/logger=org.jboss.weld.logging.ConfigurationLogger:add
/subsystem=logging/logger=org.jboss.weld.logging.ConfigurationLogger:write-attribute(name=level,value=DEBUG)
/subsystem=logging/logger=org.jboss.weld.logging.ConfigurationLogger:write-attribute(name=filter-spec, value="any(match(\"Catching\"), levelRange[INFO, FATAL])")

/subsystem=logging/logger=org.jboss.weld.logging.ContextLogger:add
/subsystem=logging/logger=org.jboss.weld.logging.ContextLogger:write-attribute(name=level,value=DEBUG)
/subsystem=logging/logger=org.jboss.weld.logging.ContextLogger:write-attribute(name=filter-spec, value="any(match(\"Catching\"), levelRange[INFO, FATAL])")

/subsystem=logging/logger=org.jboss.weld.logging.ConversationLogger:add
/subsystem=logging/logger=org.jboss.weld.logging.ConversationLogger:write-attribute(name=level,value=DEBUG)
/subsystem=logging/logger=org.jboss.weld.logging.ConversationLogger:write-attribute(name=filter-spec, value="any(match(\"Catching\"), levelRange[INFO, FATAL])")

/subsystem=logging/logger=org.jboss.weld.logging.ElLogger:add
/subsystem=logging/logger=org.jboss.weld.logging.ElLogger:write-attribute(name=level,value=DEBUG)
/subsystem=logging/logger=org.jboss.weld.logging.ElLogger:write-attribute(name=filter-spec, value="any(match(\"Catching\"), levelRange[INFO, FATAL])")

/subsystem=logging/logger=org.jboss.weld.logging.EventLogger:add
/subsystem=logging/logger=org.jboss.weld.logging.EventLogger:write-attribute(name=level,value=DEBUG)
/subsystem=logging/logger=org.jboss.weld.logging.EventLogger:write-attribute(name=filter-spec, value="any(match(\"Catching\"), levelRange[INFO, FATAL])")

/subsystem=logging/logger=org.jboss.weld.logging.InterceptorLogger:add
/subsystem=logging/logger=org.jboss.weld.logging.InterceptorLogger:write-attribute(name=level,value=DEBUG)
/subsystem=logging/logger=org.jboss.weld.logging.InterceptorLogger:write-attribute(name=filter-spec, value="any(match(\"Catching\"), levelRange[INFO, FATAL])")

/subsystem=logging/logger=org.jboss.weld.logging.MetadataLogger:add
/subsystem=logging/logger=org.jboss.weld.logging.MetadataLogger:write-attribute(name=level,value=DEBUG)
/subsystem=logging/logger=org.jboss.weld.logging.MetadataLogger:write-attribute(name=filter-spec, value="any(match(\"Catching\"), levelRange[INFO, FATAL])")

/subsystem=logging/logger=org.jboss.weld.logging.ReflectionLogger:add
/subsystem=logging/logger=org.jboss.weld.logging.ReflectionLogger:write-attribute(name=level,value=DEBUG)
/subsystem=logging/logger=org.jboss.weld.logging.ReflectionLogger:write-attribute(name=filter-spec, value="any(match(\"Catching\"), levelRange[INFO, FATAL])")

/subsystem=logging/logger=org.jboss.weld.logging.ResolutionLogger:add
/subsystem=logging/logger=org.jboss.weld.logging.ResolutionLogger:write-attribute(name=level,value=DEBUG)
/subsystem=logging/logger=org.jboss.weld.logging.ResolutionLogger:write-attribute(name=filter-spec, value="any(match(\"Catching\"), levelRange[INFO, FATAL])")

/subsystem=logging/logger=org.jboss.weld.logging.SerializationLogger:add
/subsystem=logging/logger=org.jboss.weld.logging.SerializationLogger:write-attribute(name=level,value=DEBUG)
/subsystem=logging/logger=org.jboss.weld.logging.SerializationLogger:write-attribute(name=filter-spec, value="any(match(\"Catching\"), levelRange[INFO, FATAL])")

/subsystem=logging/logger=org.jboss.weld.logging.UtilLogger:add
/subsystem=logging/logger=org.jboss.weld.logging.UtilLogger:write-attribute(name=level,value=DEBUG)
/subsystem=logging/logger=org.jboss.weld.logging.UtilLogger:write-attribute(name=filter-spec, value="any(match(\"Catching\"), levelRange[INFO, FATAL])")

/subsystem=logging/logger=org.jboss.weld.logging.ValidatorLogger:add
/subsystem=logging/logger=org.jboss.weld.logging.ValidatorLogger:write-attribute(name=level,value=DEBUG)
/subsystem=logging/logger=org.jboss.weld.logging.ValidatorLogger:write-attribute(name=filter-spec, value="any(match(\"Catching\"), levelRange[INFO, FATAL])")

/subsystem=logging/logger=org.jboss.weld.logging.VersionLogger:add
/subsystem=logging/logger=org.jboss.weld.logging.VersionLogger:write-attribute(name=level,value=DEBUG)
/subsystem=logging/logger=org.jboss.weld.logging.VersionLogger:write-attribute(name=filter-spec, value="any(match(\"Catching\"), levelRange[INFO, FATAL])")

/subsystem=logging/logger=org.jboss.weld.logging.XmlLogger:add
/subsystem=logging/logger=org.jboss.weld.logging.XmlLogger:write-attribute(name=level,value=DEBUG)
/subsystem=logging/logger=org.jboss.weld.logging.XmlLogger:write-attribute(name=filter-spec, value="any(match(\"Catching\"), levelRange[INFO, FATAL])")

/subsystem=logging/logger=org.jboss.weld.probe.ProbeLogger:add
/subsystem=logging/logger=org.jboss.weld.probe.ProbeLogger:write-attribute(name=level,value=DEBUG)
/subsystem=logging/logger=org.jboss.weld.probe.ProbeLogger:write-attribute(name=filter-spec, value="any(match(\"Catching\"), levelRange[INFO, FATAL])")

# ==== infinispan ====
/subsystem=infinispan/cache-container=zanata:add(module="org.jboss.as.clustering.web.infinispan",default-cache="default",jndi-name="java:jboss/infinispan/container/zanata",statistics-enabled="true")
/subsystem=infinispan/cache-container=zanata/local-cache=default:add(statistics-enabled="true")
/subsystem=infinispan/cache-container=zanata/local-cache=default/transaction=TRANSACTION:add(mode="NON_XA")
/subsystem=infinispan/cache-container=zanata/local-cache=default/eviction=EVICTION:add(max-entries="10000",strategy="LRU")
/subsystem=infinispan/cache-container=zanata/local-cache=default/expiration=EXPIRATION:add(max-idle="100000")


# ==== message queue ====
jms-queue add --queue-address=MailsQueue --durable=true --entries=["java:/jms/queue/MailsQueue"]


# ==== security ====
## add zanata security domain
/subsystem=security/security-domain=zanata:add()
/subsystem=security/security-domain=zanata/authentication=classic:add()
/subsystem=security/security-domain=zanata/authentication=classic/login-module=ZanataCentralLoginModule:add(code="org.zanata.security.ZanataCentralLoginModule",flag="required")
## add zanata.internal security domain
/subsystem=security/security-domain=zanata.internal:add()
/subsystem=security/security-domain=zanata.internal/authentication=classic:add()
/subsystem=security/security-domain=zanata.internal/authentication=classic/login-module=ZanataInternalLoginModule:add(code="org.zanata.security.jaas.InternalLoginModule",flag="required")
## add zanata.openid security domain
/subsystem=security/security-domain=zanata.openid:add()
/subsystem=security/security-domain=zanata.openid/authentication=classic:add()
# uncomment following line and comment the line below will turn the instance into single OpenID provider mode. Sign in will go straight to the openID provider
# /subsystem=security/security-domain=zanata.openid/authentication=classic/login-module=ZanataOpenIdLoginModule:add(code="org.zanata.security.OpenIdLoginModule",flag="required",module-options={providerURL="https://id.fedoraproject.org/openid/"})
/subsystem=security/security-domain=zanata.openid/authentication=classic/login-module=ZanataOpenIdLoginModule:add(code="org.zanata.security.OpenIdLoginModule",flag="required")
## add SAML security domain
/subsystem=security/security-domain=zanata.saml2:add(cache-type=default)
/subsystem=security/security-domain=zanata.saml2/authentication=classic:add
/subsystem=security/security-domain=zanata.saml2/authentication=classic/login-module=org.picketlink.identity.federation.bindings.jboss.auth.SAML2LoginModule:add(code=org.picketlink.identity.federation.bindings.jboss.auth.SAML2LoginModule,flag=required)

# ==== mail session ====
/socket-binding-group=standard-sockets/remote-destination-outbound-socket-binding=my-smtp:add(host=${env.MAIL_HOST:localhost}, port=${MAIL_PORT:25})
/subsystem=mail/mail-session=default/server=smtp:write-attribute(name=outbound-socket-binding-ref,value=my-smtp)
# The env.MAIL_USERNAME and env.MAIL_PASSWORD value can not be empty otherwise jboss will fail to enable the mail session resource.
# Default value set by docker will be ' ' (single space string).
/subsystem=mail/mail-session=default/server=smtp:write-attribute(name=username,value=${env.MAIL_USERNAME})
/subsystem=mail/mail-session=default/server=smtp:write-attribute(name=password,value=${env.MAIL_PASSWORD})

run-batch

<?xml version="1.0" encoding="UTF-8"?>
<web-app
  xmlns="http://xmlns.jcp.org/xml/ns/javaee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
  version="3.1">

  <absolute-ordering>
    <name>com_ocpsoft_rewrite</name>
    <name>deltaspike_servlet_module</name>
    <others/>
  </absolute-ordering>

  <session-config>
    <!-- Prevent jsessionid session tracking (breaks WildFly 9) -->
    <tracking-mode>COOKIE</tracking-mode>
  </session-config>

  <!-- sso security -->

  <!-- Kerberos ticket based authentication settings -->

  <security-constraint>
    <web-resource-collection>
      <web-resource-name>sign in</web-resource-name>
      <url-pattern>/account/klogin</url-pattern>
    </web-resource-collection>
    <auth-constraint>
      <role-name>*</role-name>
    </auth-constraint>
  </security-constraint>
  <login-config>
    <auth-method>SPNEGO,FORM</auth-method>
    <form-login-config>
      <form-login-page>/account/kloginform.jsp</form-login-page>
      <!-- Error page not needed since the login form takes over -->
      <form-error-page>/</form-error-page>
    </form-login-config>
  </login-config>
  <security-role>
    <role-name>*</role-name>
  </security-role>

  <!-- RichFaces -->

  <context-param>
    <param-name>org.richfaces.push.jms.enabled</param-name>
    <param-value>false</param-value>
  </context-param>

  <context-param>
    <param-name>org.richfaces.skin</param-name>
    <param-value>classic</param-value>
  </context-param>

  <!-- We already implemented custom filter controls, so disable built-ins -->
  <context-param>
    <param-name>org.richfaces.builtin.filter.enabled</param-name>
    <param-value>false</param-value>
  </context-param>

  <!-- Suppress spurious stylesheets -->

  <context-param>
    <param-name>org.richfaces.enableControlSkinning</param-name>
    <param-value>false</param-value>
  </context-param>

  <context-param>
    <param-name>org.richfaces.enableControlSkinningClasses</param-name>
    <param-value>false</param-value>
  </context-param>

  <!--
    Change load strategy to DEFAULT to disable sending scripts/styles as
    packs
  -->

  <context-param>
    <param-name>org.richfaces.resourceOptimization.enabled</param-name>
    <!--
      TODO: When this is set to all, css from custom Richfaces components
      such as zanata-richfaces-ui components are not loaded.
    -->
    <param-value>true</param-value>
  </context-param>

  <!-- Enable this to stop optimizing resources
  (for example: to debug javascript) -->
  <!--<context-param>
    <param-name>javax.faces.PROJECT_STAGE</param-name>
    <param-value>Development</param-value>
  </context-param>-->

  <!--
  Make sure Liquibase is the first listener (after ClassLoaderLeakPreventor),
  so that it can update the database schema before
  anyone uses the database.
   -->

  <context-param>
    <param-name>liquibase.changelog</param-name>
    <param-value>db/db.changelog.xml</param-value>
  </context-param>

  <context-param>
    <param-name>liquibase.datasource</param-name>
    <param-value>java:jboss/datasources/zanataDatasource</param-value>
  </context-param>
  <!--
  <context-param>
      <param-name>liquibase.host.excludes</param-name>
      <param-value>production1.example.com, production2.example.com</param-value>
  </context-param>
   -->

  <context-param>
    <param-name>liquibase.onerror.fail</param-name>
    <param-value>true</param-value>
  </context-param>

  <!--
  <context-param>
      <param-name>liquibase.contexts</param-name>
      <param-value>production</param-value>
  </context-param>
   -->

  <context-param>
    <param-name>javamelody.datasources</param-name>
    <param-value>java:jboss/datasources/zanataDatasource</param-value>
  </context-param>

  <context-param>
    <param-name>javamelody.monitoring-path</param-name>
    <param-value>/admin/monitoring</param-value>
  </context-param>

  <!-- Zanata custom taglib -->
  <context-param>
    <param-name>javax.faces.FACELETS_LIBRARIES</param-name>
    <param-value>/WEB-INF/zanata.taglib.xml</param-value>
  </context-param>

  <!-- ClassLoaderLeakPreventor needs to be first, so that it can stop all leaks -->
  <listener>
    <listener-class>org.zanata.servlet.LeakListener</listener-class>
  </listener>

  <listener>
    <!-- this listener needs to appear before liquibase listener to log useful
    database metadata for troubleshooting potential errors-->
    <listener-class>org.zanata.database.DatabaseMetadataListener</listener-class>
  </listener>

  <listener>
    <!-- this listener will check invalid/missing system properties so should be
     ran before liquibase -->
    <listener-class>org.zanata.config.SystemConfigStartupCheck</listener-class>
  </listener>

  <listener>
    <listener-class>liquibase.integration.servlet.LiquibaseServletListener</listener-class>
  </listener>


  <!-- This is already declared in the web-fragment.xml in javamelody's jar: -->
  <!--<listener>-->
    <!--<listener-class>net.bull.javamelody.SessionListener</listener-class>-->
  <!--</listener>-->

  <!-- Needs to be first otherwise the character set might accidentally be locked to ISO-8859-1 -->
  <filter-mapping>
    <filter-name>CharacterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>RestLimitingFilter</filter-name>
    <url-pattern>/rest/*</url-pattern>
    <url-pattern>/seam/resource/restv1/*</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>RequestLoggingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>OAuthFilter</filter-name>
    <url-pattern>/oauth/*</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>MDCInsertingServletFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter>
    <filter-name>gwtCacheControlFilter</filter-name>
    <filter-class>org.zanata.servlet.GWTCacheControlFilter</filter-class>
  </filter>

  <filter-mapping>
    <filter-name>gwtCacheControlFilter</filter-name>
    <url-pattern>/webtrans/*</url-pattern>
  </filter-mapping>


  <filter>
    <filter-name>noCacheFilter</filter-name>
    <filter-class>org.zanata.servlet.CacheControlFilter</filter-class>
    <init-param>
      <param-name>shouldCache</param-name>
      <param-value>false</param-value>
    </init-param>
  </filter>

  <filter-mapping>
    <filter-name>noCacheFilter</filter-name>
    <url-pattern>/account/*</url-pattern>
    <url-pattern>/version-group/version_group.xhtml</url-pattern>
    <url-pattern>/version-group/view/*</url-pattern>
    <url-pattern>/project/project.xhtml</url-pattern>
    <url-pattern>/project/view/*</url-pattern>
    <url-pattern>/iteration/view.xhtml</url-pattern>
    <url-pattern>/iteration/view/*</url-pattern>
  </filter-mapping>

  <!--java melody for monitoring stats-->
  <filter>
    <!-- This name must match the web-fragment.xml in javamelody's jar,
         so that we can override it. -->
    <filter-name>javamelody</filter-name>
    <filter-class>org.zanata.servlet.JavaMelodyFilter</filter-class>
    <!--<async-supported>true</async-supported>-->
  </filter>
  <filter-mapping>
    <filter-name>javamelody</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- Facelets development mode (disable in production)
  To use it, add the following to $JBOSS_HOME/server/$profile/deployers/jbossweb.deployer/web.xml :-->

  <context-param>
    <param-name>facelets.DEVELOPMENT</param-name>
    <param-value>true</param-value>
  </context-param>

  <!-- JSF -->

  <context-param>
    <param-name>javax.faces.DEFAULT_SUFFIX</param-name>
    <param-value>.xhtml</param-value>
  </context-param>

  <context-param>
    <param-name>javax.faces.FACELETS_VIEW_MAPPINGS</param-name>
    <param-value>*.xhtml</param-value>
  </context-param>

  <context-param>
    <param-name>org.richfaces.fileUpload.maxRequestSize</param-name>
    <!-- bytes -->
    <param-value>10000000</param-value>
  </context-param>

  <!-- This would eliminate ViewExpiredException when sessions expire, but may hurt performance:
    <context-param>
        <param-name>javax.faces.STATE_SAVING_METHOD</param-name>
        <param-value>client</param-value>
    </context-param>
  -->

  <servlet>
    <servlet-name>Faces Servlet</servlet-name>
    <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
    <load-on-startup>2</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>Faces Servlet</servlet-name>
    <url-pattern>*.xhtml</url-pattern>
  </servlet-mapping>

  <!-- GWTEventService -->

  <servlet>
    <servlet-name>EventService</servlet-name>
    <servlet-class>de.novanic.eventservice.service.EventServiceImpl</servlet-class>
  </servlet>

  <servlet-mapping>
    <servlet-name>EventService</servlet-name>
    <url-pattern>/webtrans/gwteventservice</url-pattern>
  </servlet-mapping>

  <!-- Multi File upload service -->
  <servlet>
    <servlet-name>multiUploadServlet</servlet-name>
    <servlet-class>org.zanata.servlet.MultiFileUploadServlet</servlet-class>
  </servlet>

  <servlet-mapping>
    <servlet-name>multiUploadServlet</servlet-name>
    <url-pattern>/files/upload/*</url-pattern>
  </servlet-mapping>

  <mime-mapping>
    <extension>xrd</extension>
    <mime-type>application/xrd+xml</mime-type>
  </mime-mapping>

  <mime-mapping>
    <extension>ico</extension>
    <mime-type>image/x-icon</mime-type>
  </mime-mapping>

  <mime-mapping>
    <extension>woff</extension>
    <mime-type>application/font-woff</mime-type>
  </mime-mapping>

  <!-- If included, this causes the home page (/) to generate a Log In link
  with the unwanted parameter continue=home.xhtml   -->
  <!--<welcome-file-list>-->
    <!--<welcome-file>home.xhtml</welcome-file>-->
  <!--</welcome-file-list>-->

  <error-page>
    <error-code>404</error-code>
    <location>/404.xhtml</location>
  </error-page>

</web-app>

<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.zanata</groupId>
    <artifactId>server</artifactId>
    <version>4.3.0-SNAPSHOT</version>
  </parent>
  <artifactId>zanata-frontend</artifactId>
  <name>Zanata frontend</name>
  <!-- TODO switch to takari-jar for more efficient resource copying -->
  <packaging>jar</packaging>

  <!-- Connection URLs repeated as workaround for https://issues.apache.org/jira/browse/MPIR-234 -->
  <scm>
    <connection>scm:git:https://github.com/zanata/zanata-platform.git</connection>
    <developerConnection>scm:git:git@github.com:zanata/zanata-platform.git</developerConnection>
    <tag>HEAD</tag>
  </scm>

  <!-- Referenced later in the document with ${tagname}. -->
  <properties>
    <!-- Node and Yarn versions that will be downloaded and used for zanata-frontend. -->
    <node.version>v8.1.3</node.version>
    <yarn.version>v0.27.5</yarn.version>
    <!-- The location to download the correct version of Node and Yarn to.
        ${download.dir} comes from zanata-server/pom.xml -->
    <yarn.install.directory>${download.dir}/zanata/node-${node.version}-yarn-${yarn.version}</yarn.install.directory>

    <!-- Specified to ensure build is consistent cross-platform. -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- Directory for frontend to run the build from. -->
    <frontend.build.directory>${project.basedir}/src/frontend</frontend.build.directory>

    <!-- Command to use after 'npm ' for the frontend build. Default is the faster draft build. -->
    <frontend.build.command>draft</frontend.build.command>

    <test.command>test</test.command>

    <!-- Root path within the jar to put the built artifacts.
         Note: META-INF/resources/* is served as static content, so this serves
         the built files at the root of the website -->
    <bundle.dest>${project.build.outputDirectory}/META-INF/resources</bundle.dest>

    <!-- Do not run checkstyle (eslint is used instead for this module) -->
    <checkstyle.skip>true</checkstyle.skip>
  </properties>

  <dependencies>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>com.github.eirslett</groupId>
        <artifactId>frontend-maven-plugin</artifactId>
        <version>1.3</version>
        <configuration>
          <installDirectory>${yarn.install.directory}</installDirectory>
        </configuration>
        <executions>
          <!-- Installs correct version of node and yarn locally. -->
          <execution>
            <id>install node and yarn</id>
            <phase>initialize</phase>
            <goals>
              <goal>install-node-and-yarn</goal>
            </goals>
            <configuration>
              <nodeVersion>${node.version}</nodeVersion>
              <yarnVersion>${yarn.version}</yarnVersion>
            </configuration>
          </execution>

          <!-- frontend: Transpile and bundle all the javascript and css -->
          <execution>
            <id>frontend: execute yarn build</id>
            <phase>compile</phase>
            <goals>
              <goal>yarn</goal>
            </goals>
            <configuration>
              <workingDirectory>${frontend.build.directory}</workingDirectory>
              <arguments>${frontend.build.command}</arguments>
            </configuration>
          </execution>

          <!-- Run javascript tests for frontend -->
          <execution>
            <id>frontend: execute yarn test</id>
            <phase>test</phase>
            <goals>
              <goal>yarn</goal>
            </goals>
            <configuration>
              <workingDirectory>${frontend.build.directory}</workingDirectory>
              <arguments>${test.command}</arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>

      <!-- Copy the built files into META-INF/resources (or nested directories).
            Files in this location will be built in the JAR file and served relative to the root path of the web app.
            e.g. META-INF/resources/app/index.html will be served at example.org/app/index.html -->
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <!-- Copy the built frontend files to their position in the jar file. -->
          <execution>
            <phase>prepare-package</phase>
            <id>frontend copy-resources</id>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <!-- Do not substitute maven variables like ${variablename} in the
                   contents of these files. -->
              <useBuildFilters>false</useBuildFilters>
              <outputDirectory>${bundle.dest}</outputDirectory>
              <resources>
                <resource>
                  <directory>src/frontend/dist</directory>
                  <include>editor.min.js</include>
                  <include>editor.css</include>
                  <include>editor.css.map</include>
                  <include>intl-polyfill.min.js</include>
                  <include>frontend.min.js</include>
                  <include>frontend.legacy.min.js</include>
                  <include>frontend.css</include>
                  <include>frontend.css.map</include>
                  <include>*.js.map</include>
                  <!-- TODO eliminate generate bootstrap.css, bundle.js, style.css? -->
                  <!-- TODO try including everything -->
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <version>3.0.0</version>
        <configuration>
          <filesets>
            <fileset>
              <directory>src</directory>
              <includes>
                <include>**/node_modules/**</include>
                <include>**/dist/**</include>
              </includes>
              <followSymlinks>false</followSymlinks>
            </fileset>
          </filesets>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>yarn install</id>
      <activation>
        <property>
          <name>!skip.npminstall</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>com.github.eirslett</groupId>
            <artifactId>frontend-maven-plugin</artifactId>
            <executions>
              <!-- Download all dependency modules from yarn (or mirror). -->
              <execution>
                <id>frontend: execute yarn install</id>
                <phase>generate-sources</phase>
                <goals>
                  <goal>yarn</goal>
                </goals>
                <configuration>
                  <workingDirectory>${frontend.build.directory}</workingDirectory>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <!-- Enable -DskipUnitTests to skip npm test -->
      <id>skipUnitTests</id>
      <activation>
        <property>
          <name>skipUnitTests</name>
        </property>
      </activation>
      <properties>
        <skipTests>true</skipTests>
      </properties>
    </profile>
    <profile>
      <!-- Enable -Dmaven.main.skip to skip node/npm install and build -->
      <id>maven.main.skip</id>
      <activation>
        <property>
          <name>maven.main.skip</name>
        </property>
      </activation>
      <properties>
        <skip.yarn>true</skip.yarn>
      </properties>
    </profile>
    <profile>
      <id>optimisedBuild</id>
      <activation>
        <property>
          <name>optimise</name>
        </property>
      </activation>
      <properties>
        <frontend.build.command>build</frontend.build.command>
      </properties>
    </profile>
  </profiles>

</project>
